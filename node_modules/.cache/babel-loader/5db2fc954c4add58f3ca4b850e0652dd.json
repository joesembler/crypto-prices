{"ast":null,"code":"var _jsxFileName = \"/Users/sarahnosal/Development/code/phase-2/Project/crypto-prices/src/components/CoinPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CoinPage() {\n  _s();\n\n  const params = useParams();\n  const [coin, setCoin] = useState({});\n  useEffect(() => {\n    fetch(`https://api.coingecko.com/api/v3/coins/${params.id}`).then(r => r.json()).then(data => {\n      setCoin(data);\n      console.log(data);\n    });\n    console.log(params);\n  }, [params]);\n  let symbol;\n\n  if (coin.currency === \"usd\") {\n    symbol = '$';\n  } else if (coin.currency === \"eur\") {\n    symbol = '€';\n  } else {\n    symbol = '¥';\n  }\n\n  function currencyFormat(num) {\n    if (num < .1) {\n      return symbol + num.toFixed(5);\n    } else if (num == null) {\n      return null;\n    } else {\n      return symbol + num.toFixed(2);\n    }\n  }\n\n  function percentageFormat(num) {\n    if (num > 0) {\n      return '+' + num.toFixed(2) + '%';\n    } else if (num == null) {\n      return null;\n    } else {\n      return num.toFixed(2) + '%';\n    }\n  }\n\n  function marketCapFormat(num) {\n    if (num > 1000000000000) {\n      const newNum = num / 1000000000000;\n      return symbol + newNum.toFixed(1) + \"  trillion\";\n    } else if (num > 1000000000) {\n      const newNum = num / 1000000000;\n      return symbol + newNum.toFixed(1) + \"  billion\";\n    } else if (num > 1000000) {\n      const newNum = num / 1000000;\n      return symbol + newNum.toFixed(1) + \"  million\";\n    }\n  }\n\n  function formatLastUpdated(date) {\n    let lastUpdatedMill = Date.parse(date);\n    let now = new Date();\n    now = Date.parse(now);\n    lastUpdatedMill = now - lastUpdatedMill;\n    const lastUpdatedMin = lastUpdatedMill / 1000 / 60;\n    return Math.round(lastUpdatedMin);\n  }\n\n  if (coin.image != null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CryptoCoin\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        height: \"150\",\n        width: \"500\",\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          width: \"1080\",\n          height: \"1080\",\n          fill: \"#ffff59\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"image\", {\n          href: coin.image.large,\n          width: \"100\",\n          height: \"100\",\n          x: \"28\",\n          y: \"15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          fill: \"black\",\n          fontSize: \"30\",\n          fontFamily: \"Marker Felt\",\n          x: \"4\",\n          y: \"37\",\n          children: [\"#\", coin.market_cap_rank]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          fill: \"white\",\n          fontSize: \"30\",\n          fontFamily: \"Marker Felt\",\n          x: \"2\",\n          y: \"35\",\n          children: [\"#\", coin.market_cap_rank]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          fill: \"black\",\n          opacity: \"0.95\",\n          fontSize: \"50\",\n          fontFamily: \"Marker Felt\",\n          x: \"150\",\n          y: \"60\",\n          children: coin.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          fill: \"#black\",\n          fontSize: \"25\",\n          fontFamily: \"Sans-serif\",\n          fontWeight: \"500\",\n          x: \"365\",\n          y: \"90\",\n          children: currencyFormat(coin.market_current_price)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          fill: coin.price_change_percentage_24h > 0 ? \"green\" : \"red\",\n          fontSize: \"25\",\n          fontFamily: \"Sans-serif\",\n          fontWeight: \"500\",\n          x: \"365\",\n          y: \"130\",\n          children: percentageFormat(coin.price_change_percentage_24h)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          fill: \"#black\",\n          fontSize: \"16\",\n          fontFamily: \"Sans-serif\",\n          fontWeight: \"500\",\n          x: \"150\",\n          y: \"100\",\n          children: [\"Market Cap: \", marketCapFormat(coin.market_cap)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          fill: \"#black\",\n          fontSize: \"16\",\n          fontFamily: \"Sans-serif\",\n          fontWeight: \"500\",\n          x: \"150\",\n          y: \"130\",\n          children: [\"Data as of \", formatLastUpdated(coin.last_updated), \" minute\", formatLastUpdated(coin.last_updated) !== 1 ? 's' : '', \" ago\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this);\n  }\n}\n\n_s(CoinPage, \"bZ/DXvkz21+8ARyg0YM1fomY5IM=\", false, function () {\n  return [useParams];\n});\n\n_c = CoinPage;\nexport default CoinPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinPage\");","map":{"version":3,"sources":["/Users/sarahnosal/Development/code/phase-2/Project/crypto-prices/src/components/CoinPage.js"],"names":["React","useEffect","useState","useParams","CoinPage","params","coin","setCoin","fetch","id","then","r","json","data","console","log","symbol","currency","currencyFormat","num","toFixed","percentageFormat","marketCapFormat","newNum","formatLastUpdated","date","lastUpdatedMill","Date","parse","now","lastUpdatedMin","Math","round","image","large","market_cap_rank","name","market_current_price","price_change_percentage_24h","market_cap","last_updated"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {  useParams } from 'react-router-dom';\n\nfunction CoinPage(){\n    const params= useParams();\n    const [coin, setCoin] = useState({});\n\n    \n\n    useEffect(() => {\n        fetch(`https://api.coingecko.com/api/v3/coins/${params.id}`)\n            .then(r=>r.json())\n            .then(data=> {\n                setCoin(data);\n                console.log(data)\n            })\n    console.log(params)\n\n    }, [params]);\n\n\n    let symbol;\n    if(coin.currency === \"usd\"){\n        symbol = '$';\n    }\n    else if(coin.currency === \"eur\"){\n        symbol = '€';\n    }\n    else{\n        symbol = '¥';\n    }\n\n    function currencyFormat(num) {\n        if(num < .1){\n            return symbol + num.toFixed(5);\n        }\n        else if(num == null){\n            return null;\n        }\n        else{\n            return symbol + num.toFixed(2);\n        }\n    }\n\n    function percentageFormat(num){\n        if(num > 0){\n            return '+' + num.toFixed(2) + '%';\n        }\n        else if(num == null){\n            return null; \n        }\n        else{\n            return num.toFixed(2) + '%';\n        }\n    }\n\n    function marketCapFormat(num){\n        if(num > 1000000000000){\n            const newNum = num /1000000000000;\n            return (symbol + newNum.toFixed(1) + \"  trillion\");\n        }\n        else if(num > 1000000000){\n            const newNum = num / 1000000000\n            return (symbol + newNum.toFixed(1) + \"  billion\");\n        }\n        else if(num > 1000000){\n            const newNum = num / 1000000;\n            return (symbol + newNum.toFixed(1) + \"  million\");\n        }\n    }\n\n    function formatLastUpdated(date){\n        let lastUpdatedMill = Date.parse(date);\n        let now = new Date();\n        now = Date.parse(now);\n\n        lastUpdatedMill = now - lastUpdatedMill;\n\n        const lastUpdatedMin = lastUpdatedMill / 1000 / 60;\n        return Math.round(lastUpdatedMin);\n    }\n        \n    if (coin.image != null){\n            return(\n                <div className=\"CryptoCoin\">\n                    <svg height=\"150\" width=\"500\">\n                    \n                        <rect width=\"1080\" height=\"1080\" fill=\"#ffff59\" />\n                        <image href={coin.image.large} width=\"100\" height=\"100\" x=\"28\" y=\"15\"/>\n                        {/* <circle fill=\"#FEE585\" cx=\"30\" cy=\"30\" r=\"30\"/> */}\n                        <text fill=\"black\" fontSize=\"30\" fontFamily=\"Marker Felt\" x=\"4\" y=\"37\">#{coin.market_cap_rank}</text>\n                        <text fill=\"white\" fontSize=\"30\" fontFamily=\"Marker Felt\" x=\"2\" y=\"35\">#{coin.market_cap_rank}</text>\n                        \n                        <text fill=\"black\" opacity=\"0.95\" fontSize=\"50\" fontFamily=\"Marker Felt\" x=\"150\" y=\"60\">{coin.name}</text>\n                        <text fill=\"#black\"  fontSize=\"25\" fontFamily=\"Sans-serif\" fontWeight=\"500\" x=\"365\" y=\"90\">{currencyFormat(coin.market_current_price)}</text>\n                        <text fill={coin.price_change_percentage_24h > 0 ? \"green\" : \"red\"}  fontSize=\"25\" fontFamily=\"Sans-serif\" fontWeight=\"500\" x=\"365\" y=\"130\">{percentageFormat(coin.price_change_percentage_24h)}</text>\n                        <text fill=\"#black\"  fontSize=\"16\" fontFamily=\"Sans-serif\" fontWeight=\"500\" x=\"150\" y=\"100\">Market Cap: {marketCapFormat(coin.market_cap)}</text>\n\n                        <text fill=\"#black\"  fontSize=\"16\" fontFamily=\"Sans-serif\" fontWeight=\"500\" x=\"150\" y=\"130\">Data as of {formatLastUpdated(coin.last_updated)} minute{formatLastUpdated(coin.last_updated) !== 1 ? 's' : ''} ago</text>\n\n                    </svg>  \n                </div>\n            )\n        }\n    else{\n        return (<div></div>)\n    }\n        \n    \n}\n\nexport default CoinPage;"]},"metadata":{},"sourceType":"module"}