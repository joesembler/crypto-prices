{"ast":null,"code":"var _jsxFileName = \"/Users/sarahnosal/Development/code/phase-2/Project/crypto-prices/src/components/CoinPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CoinPage() {\n  _s();\n\n  const params = useParams();\n  const [coin, setCoin] = useState({});\n  useEffect(() => {\n    fetch(`https://api.coingecko.com/api/v3/coins/${params.id}`).then(r => r.json()).then(data => {\n      setCoin(data);\n      console.log(data);\n    });\n  }, [params]);\n  let symbol = \"$\";\n\n  function currencyFormat(num) {\n    if (num < .1) {\n      return symbol + num.toFixed(5);\n    } else if (num == null) {\n      return null;\n    } else {\n      return symbol + num.toFixed(2);\n    }\n  }\n\n  function percentageFormat(num) {\n    if (num > 0) {\n      return '+' + num.toFixed(2) + '%';\n    } else if (num == null) {\n      return null;\n    } else {\n      return num.toFixed(2) + '%';\n    }\n  }\n\n  function marketCapFormat(num) {\n    console.log(num);\n\n    if (num > 1000000000000) {\n      const newNum = num / 1000000000000;\n      return symbol + newNum.toFixed(1) + \"  trillion\";\n    } else if (num > 1000000000) {\n      const newNum = num / 1000000000;\n      return symbol + newNum.toFixed(1) + \"  billion\";\n    } else if (num > 1000000) {\n      const newNum = num / 1000000;\n      return symbol + newNum.toFixed(1) + \"  million\";\n    }\n  }\n\n  function formatLastUpdated(date) {\n    let lastUpdatedMill = Date.parse(date);\n    let now = new Date();\n    now = Date.parse(now);\n    lastUpdatedMill = now - lastUpdatedMill;\n    const lastUpdatedMin = lastUpdatedMill / 1000 / 60;\n    return Math.round(lastUpdatedMin);\n  }\n\n  if (coin.image != null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CoinPage\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"CoinPageImage\",\n        src: coin.image.large,\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: coin.links.homepage[0],\n          children: \"here!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 69\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"CoinPageHeaders\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: coin.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: currencyFormat(coin.market_data.current_price.usd)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          id: \"CoinPagePercentChange\",\n          children: percentageFormat(coin.market_data.market_cap_change_percentage_24h)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          id: \"CoinPageMarketCapRank\",\n          children: [\"Rank: #\", coin.market_data.market_cap_rank]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          id: \"CoinPageMarketCap\",\n          children: [\"Market Cap: \", marketCapFormat(coin.market_data.market_cap.usd)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"homePageLink\",\n          children: [\" Visit their website \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: coin.links.homepage[0],\n            children: \"here!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 75\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"description\",\n        children: coin.description.en\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"emptyCryptoPage\",\n      children: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }, this);\n  }\n}\n\n_s(CoinPage, \"bZ/DXvkz21+8ARyg0YM1fomY5IM=\", false, function () {\n  return [useParams];\n});\n\n_c = CoinPage;\nexport default CoinPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinPage\");","map":{"version":3,"sources":["/Users/sarahnosal/Development/code/phase-2/Project/crypto-prices/src/components/CoinPage.js"],"names":["React","useEffect","useState","useParams","CoinPage","params","coin","setCoin","fetch","id","then","r","json","data","console","log","symbol","currencyFormat","num","toFixed","percentageFormat","marketCapFormat","newNum","formatLastUpdated","date","lastUpdatedMill","Date","parse","now","lastUpdatedMin","Math","round","image","large","links","homepage","name","market_data","current_price","usd","market_cap_change_percentage_24h","market_cap_rank","market_cap","description","en"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {  useParams } from 'react-router-dom';\n\nfunction CoinPage(){\n    const params= useParams();\n    const [coin, setCoin] = useState({});\n\n    \n\n    useEffect(() => {\n        fetch(`https://api.coingecko.com/api/v3/coins/${params.id}`)\n            .then(r=>r.json())\n            .then(data=> {\n                setCoin(data);\n                console.log(data)\n            })\n    }, [params]);\n\n\n    let symbol=\"$\";\n   \n\n    function currencyFormat(num) {\n        if(num < .1){\n            return symbol + num.toFixed(5);\n        }\n        else if(num == null){\n            return null;\n        }\n        else{\n            return symbol + num.toFixed(2);\n        }\n    }\n\n    function percentageFormat(num){\n        if(num > 0){\n            return '+' + num.toFixed(2) + '%';\n        }\n        else if(num == null){\n            return null; \n        }\n        else{\n            return num.toFixed(2) + '%';\n        }\n    }\n\n    function marketCapFormat(num){\n        console.log(num)\n        if(num > 1000000000000){\n            const newNum = num /1000000000000;\n            return (symbol + newNum.toFixed(1) + \"  trillion\");\n        }\n        else if(num > 1000000000){\n            const newNum = num / 1000000000\n            return (symbol + newNum.toFixed(1) + \"  billion\");\n        }\n        else if(num > 1000000){\n            const newNum = num / 1000000;\n            return (symbol + newNum.toFixed(1) + \"  million\");\n        }\n    }\n\n    function formatLastUpdated(date){\n        let lastUpdatedMill = Date.parse(date);\n        let now = new Date();\n        now = Date.parse(now);\n\n        lastUpdatedMill = now - lastUpdatedMill;\n\n        const lastUpdatedMin = lastUpdatedMill / 1000 / 60;\n        return Math.round(lastUpdatedMin);\n    }\n        \n    if (coin.image != null){\n            return(\n                <div className=\"CoinPage\">\n                    {/* <svg height=\"150\" width=\"500\">\n                    \n                        <rect width=\"1080\" height=\"1080\" fill=\"#ffff59\" />\n                        <image href={coin.image.large} width=\"100\" height=\"100\" x=\"28\" y=\"15\"/>\n                        \n                        <text fill=\"black\" fontSize=\"30\" fontFamily=\"Marker Felt\" x=\"4\" y=\"37\">#{coin.market_cap_rank}</text>\n                        <text fill=\"white\" fontSize=\"30\" fontFamily=\"Marker Felt\" x=\"2\" y=\"35\">#{coin.market_cap_rank}</text>\n                        \n                        <text fill=\"black\" opacity=\"0.95\" fontSize=\"50\" fontFamily=\"Marker Felt\" x=\"150\" y=\"60\">{coin.name}</text>\n                        \n                        <text fill={coin.price_change_percentage_24h > 0 ? \"green\" : \"red\"}  fontSize=\"25\" fontFamily=\"Sans-serif\" fontWeight=\"500\" x=\"365\" y=\"130\">{percentageFormat(coin.price_change_percentage_24h)}</text>\n                        \n\n                        \n\n                    </svg>   */}\n                    \n                    \n                    <img id=\"CoinPageImage\" src={coin.image.large} ><a href={coin.links.homepage[0]}>here!</a></img>\n                    <div className=\"CoinPageHeaders\">\n\n                        <h1>{coin.name}</h1>\n                        <h2>{currencyFormat(coin.market_data.current_price.usd)}</h2>\n                        <h4 id=\"CoinPagePercentChange\">{percentageFormat(coin.market_data.market_cap_change_percentage_24h)}</h4>\n                        <h4 id=\"CoinPageMarketCapRank\">Rank: #{coin.market_data.market_cap_rank}</h4>\n                        <h4 id=\"CoinPageMarketCap\">Market Cap: {marketCapFormat(coin.market_data.market_cap.usd)}</h4>\n\n\n                        \n                        <h4 className=\"homePageLink\"> Visit their website <a href={coin.links.homepage[0]}>here!</a></h4>  \n\n\n                    </div>\n\n                    \n                           \n                    <p className=\"description\">\n                        {coin.description.en}\n                    </p>  \n\n                    \n\n                    \n                   \n                    \n                </div>\n            )\n        }\n    else{\n        return (<div className=\"emptyCryptoPage\">{null}</div>)\n    }\n        \n    \n}\n\nexport default CoinPage;"]},"metadata":{},"sourceType":"module"}