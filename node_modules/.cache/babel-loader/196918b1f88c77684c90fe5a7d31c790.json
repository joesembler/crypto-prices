{"ast":null,"code":"var _jsxFileName = \"/Users/sarahnosal/Development/code/phase-2/Project/crypto-prices/src/components/WatchList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport CryptoList from './CryptoList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WatchList(props) {\n  _s();\n\n  const [watchedCoins, setWatchedCoins] = useState([]);\n  const [updatedWatchList, setUpdatedWatchList] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:3000/watchList\").then(r => r.json()).then(data => {\n      console.log(data); // I'd say put a debugger; here, then open your dev tools and check it in a browser.\n      // data show be some kind of JSON object.\n      //console.log here to see what data looks like\n      // check out key/value pairs of the object and find what you want to access\n      // ;\n      //good luck\n\n      setWatchedCoins(data); //this makes sense.\n    });\n  }, []);\n  useEffect(() => {\n    console.log(watchedCoins);\n    fetch(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=${props.currency}&order=market_cap_desc&per_page=250&page=1&sparkline=falsekets`).then(r => r.json()).then(data => {\n      let newArray = [];\n      data.forEach(coin => {\n        watchedCoins.forEach(watchedCoin => {\n          if (coin.id === watchedCoin.id) {\n            newArray.push(coin); // his scoping is weird. I'm not sure if this is going to return from the inner function in the forEach, the map, or the useEffect function. you can just use `find` for this btw. \n          }\n        });\n      });\n      console.log(newArray);\n    });\n  }, [watchedCoins.length > 0]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"WatchList\",\n    children: updatedWatchList.length > 0 ? /*#__PURE__*/_jsxDEV(CryptoList, {\n      coins: updatedWatchList,\n      currency: props.currency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 44\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WatchList, \"g5PgEUG+lEL5FZCa4XbUtLdDtrw=\");\n\n_c = WatchList;\nexport default WatchList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WatchList\");","map":{"version":3,"sources":["/Users/sarahnosal/Development/code/phase-2/Project/crypto-prices/src/components/WatchList.js"],"names":["React","useState","useEffect","CryptoList","WatchList","props","watchedCoins","setWatchedCoins","updatedWatchList","setUpdatedWatchList","fetch","then","r","json","data","console","log","currency","newArray","forEach","coin","watchedCoin","id","push","length"],"mappings":";;;AAEA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAEtB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,gBAAD,EAAmBC,mBAAnB,IAA0CR,QAAQ,CAAC,EAAD,CAAxD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,KAAK,CAAC,iCAAD,CAAL,CACCC,IADD,CACMC,CAAC,IAAEA,CAAC,CAACC,IAAF,EADT,EAECF,IAFD,CAEMG,IAAI,IAAG;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADS,CAET;AACA;AAEA;AACA;AACA;AACA;;AACDP,MAAAA,eAAe,CAACO,IAAD,CAAf,CATU,CASY;AACxB,KAZD;AAaH,GAdQ,EAcN,EAdM,CAAT;AAeAZ,EAAAA,SAAS,CAAC,MAAI;AACVa,IAAAA,OAAO,CAACC,GAAR,CAAYV,YAAZ;AACAI,IAAAA,KAAK,CAAE,8DAA6DL,KAAK,CAACY,QAAS,gEAA9E,CAAL,CACKN,IADL,CACUC,CAAC,IAAEA,CAAC,CAACC,IAAF,EADb,EAEKF,IAFL,CAEUG,IAAI,IAAG;AACT,UAAII,QAAQ,GAAG,EAAf;AAEAJ,MAAAA,IAAI,CAACK,OAAL,CAAaC,IAAI,IAAE;AACfd,QAAAA,YAAY,CAACa,OAAb,CAAsBE,WAAD,IAAiB;AAClC,cAAGD,IAAI,CAACE,EAAL,KAAYD,WAAW,CAACC,EAA3B,EAA8B;AAC1BJ,YAAAA,QAAQ,CAACK,IAAT,CAAcH,IAAd,EAD0B,CACM;AACnC;AACJ,SAJD;AAKH,OAND;AAOAL,MAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AACH,KAbL;AAeH,GAjBQ,EAiBN,CAACZ,YAAY,CAACkB,MAAb,GAAsB,CAAvB,CAjBM,CAAT;AAmBA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACKhB,gBAAgB,CAACgB,MAAjB,GAA0B,CAA1B,gBAA8B,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEhB,gBAAnB;AAAqC,MAAA,QAAQ,EAAEH,KAAK,CAACY;AAArD;AAAA;AAAA;AAAA;AAAA,YAA9B,GAAkG;AADvG;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA5CQb,S;;KAAAA,S;AA8CT,eAAeA,SAAf","sourcesContent":["\n\nimport React, {useState, useEffect} from 'react';\nimport CryptoList from './CryptoList';\n\n\nfunction WatchList(props) {\n\n    const [watchedCoins, setWatchedCoins] = useState([]);\n    const [updatedWatchList, setUpdatedWatchList] = useState([]);\n    \n    useEffect(() => {\n        fetch(\"http://localhost:3000/watchList\")\n        .then(r=>r.json())\n        .then(data=> {\n            console.log(data)\n            // I'd say put a debugger; here, then open your dev tools and check it in a browser.\n            // data show be some kind of JSON object.\n\n            //console.log here to see what data looks like\n            // check out key/value pairs of the object and find what you want to access\n            // ;\n            //good luck\n           setWatchedCoins(data) //this makes sense.\n        })\n    }, [])\n    useEffect(()=>{\n        console.log(watchedCoins)\n        fetch(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=${props.currency}&order=market_cap_desc&per_page=250&page=1&sparkline=falsekets`)\n            .then(r=>r.json())\n            .then(data=> {\n                let newArray = [];\n                \n                data.forEach(coin=>{\n                    watchedCoins.forEach((watchedCoin) => { \n                        if(coin.id === watchedCoin.id){\n                            newArray.push(coin);            // his scoping is weird. I'm not sure if this is going to return from the inner function in the forEach, the map, or the useEffect function. you can just use `find` for this btw. \n                        }\n                    })\n                })\n                console.log(newArray)\n            })\n            \n    }, [watchedCoins.length > 0])\n\n    return(\n        <div className=\"WatchList\">\n            {updatedWatchList.length > 0 ? <CryptoList coins={updatedWatchList} currency={props.currency} /> : null}\n        </div>\n    )\n}\n\nexport default WatchList;"]},"metadata":{},"sourceType":"module"}